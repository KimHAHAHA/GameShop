import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { HeaderAdmin } from '../../../components/header-admin/header-admin';
import { Game } from '../../../services/api/game'; // ‚úÖ service ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

@Component({
  selector: 'app-a-code',
  standalone: true,
  imports: [CommonModule, FormsModule, HeaderAdmin],
  templateUrl: './a-code.html',
  styleUrl: './a-code.scss',
})
export class ACode implements OnInit {
  /* ---------- üß© ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏´‡∏•‡∏±‡∏Å ---------- */
  codes: any[] = [];
  newCode = '';
  newDiscount: number | null = null;
  newMaxUse: number | null = null;

  /* ---------- ‚úèÔ∏è ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö popup ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ---------- */
  showEditPopup = false;
  editData: any = {
    id: null,
    code: '',
    discount_percent: null,
    max_use: null,
  };

  constructor(private gameService: Game) {}

  /* ---------- üöÄ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏° ---------- */
  async ngOnInit() {
    await this.loadCodes();
  }

  /* ---------- üì¶ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å backend ---------- */
  async loadCodes() {
    try {
      const res: any = await this.gameService.getAllCodes();
      console.log('üì¶ Response ‡∏à‡∏≤‡∏Å backend:', res);
      this.codes = Array.isArray(res) ? res : res.codes || [];
    } catch (err) {
      console.error('‚ùå ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', err);
      this.codes = [];
    }
  }

  /* ---------- üÜï ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏´‡∏°‡πà ---------- */
  async createCode(event: Event) {
    event.preventDefault();

    if (!this.newCode || !this.newDiscount || !this.newMaxUse) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö');
      return;
    }

    const payload = {
      code: this.newCode,
      discount_percent: this.newDiscount,
      max_use: this.newMaxUse,
    };

    try {
      const res: any = await this.gameService.createCode(payload);
      alert(res.message || '‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      this.newCode = '';
      this.newDiscount = null;
      this.newMaxUse = null;
      await this.loadCodes();
    } catch (err: any) {
      console.error('‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', err);
      alert(err.error?.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î');
    }
  }

  /* ---------- üóëÔ∏è ‡∏•‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î ---------- */
  async deleteCode(c: any) {
    // üîé ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ backend ‡∏™‡πà‡∏á id ‡∏≠‡∏∞‡πÑ‡∏£‡∏°‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô code_id ‡∏´‡∏£‡∏∑‡∏≠ id
    const id = c.id || c.code_id || c.gid;
    if (!id) {
      alert('‡πÑ‡∏°‡πà‡∏û‡∏ö ID ‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ');
      return;
    }

    if (!confirm(`‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î "${c.code}" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`)) return;

    try {
      const res: any = await this.gameService.deleteCode(id);
      alert(res.message || '‚úÖ ‡∏•‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
      await this.loadCodes();
    } catch (err) {
      console.error('‚ùå ‡∏•‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', err);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î');
    }
  }

  /* ---------- ‚úèÔ∏è ‡πÄ‡∏õ‡∏¥‡∏î popup ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ---------- */
  openEditPopup(c: any) {
    // ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ backend ‡∏™‡πà‡∏á key ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà id
    this.editData = {
      id: c.id || c.code_id || c.gid || null,
      code: c.code,
      discount_percent: c.discount_percent,
      max_use: c.max_use,
    };
    console.log('üü¢ ‡πÄ‡∏õ‡∏¥‡∏î popup ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:', this.editData);
    this.showEditPopup = true;
  }

  /* ---------- ‚ùå ‡∏õ‡∏¥‡∏î popup ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ---------- */
  closeEditPopup() {
    this.showEditPopup = false;
  }

  /* ---------- üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ---------- */
  async saveEdit() {
    const id = this.editData.id || this.editData.code_id;
    if (!id) {
      alert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç');
      return;
    }

    const payload = {
      code: this.editData.code,
      discount_percent: this.editData.discount_percent,
      max_use: this.editData.max_use,
    };

    try {
      const res: any = await this.gameService.updateCode(id, payload);
      alert(res.message || '‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      this.closeEditPopup();
      await this.loadCodes();
    } catch (err) {
      console.error('‚ùå ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', err);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏Ñ‡πâ‡∏î');
    }
  }
}
